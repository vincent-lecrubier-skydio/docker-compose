version: "3.5"
services:
  elasticsearch:
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - temporal-network
    expose:
      - 9200
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:${POSTGRESQL_VERSION}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - temporal-network
    expose:
      - 5432
  temporal:
    container_name: temporal
    depends_on:
      postgresql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    # healthcheck:
    #   test: [ "CMD-SHELL", "tctl cluster health" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    healthcheck:
      test: [ "CMD-SHELL", "ping -c 5 127.0.0.1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - temporal-network
    ports:
      - 7233:7233
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    stdin_open: true
    tty: true
    command: "tctl name"
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - temporal-network
    ports:
      - 8080:8080
  temporal-web:
    container_name: temporal-web
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    image: temporalio/web:${TEMPORAL_WEB_VERSION}
    networks:
      - temporal-network
    ports:
      - 8088:8088
  worker:
    build: 
      context: ./app
      dockerfile: ./worker/worker.dockerfile
    depends_on:
      temporal:
        condition: service_healthy
    restart: on-failure
    environment:
      - TEMPORAL_ENDPOINT=http://temporal:7233
    networks:
      - temporal-network
  client:
    build: 
      context: ./app
      dockerfile: ./client/client.dockerfile
    depends_on:
      temporal:
        condition: service_healthy
    restart: on-failure
    environment:
      - TEMPORAL_ENDPOINT=http://temporal:7233
    networks:
      - temporal-network
    ports:
      - 3000:3000
networks:
  temporal-network:
    driver: bridge
    name: temporal-network
